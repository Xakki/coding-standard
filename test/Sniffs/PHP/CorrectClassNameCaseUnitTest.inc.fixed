<?php

namespace WebimpressCodingStandardTest\Sniffs\PHP;

use ArrayObject;
use DateTime;
use InvalidArgumentException;
use RuntimeException;
use Some\BarClass;
use Some\FooClass as Foo;
use Some\MyTrait;
use WebimpressCodingStandardTest\Sniffs\AbstractTestCase;

class MyClass
    extends AbstractTestCase
    implements
        \PHP_CodeSniffer\Sniffs\Sniff,
        ArrayObject
{
    use \TestTrait;
    use MyTrait;

    public function method()
    {
        $dt = new DateTime();
        $ao = new ArrayObject();
        $ai = new \ArrayIterator();
        $dr = DateTime
            ::
            createFromFormat('Y-m-d', '2015-12-16');
        $dx = DateTime::createFromFormat('Y', '2016');

        $class = Foo::class;

        $instance = new $class;
        $myConst = $class::CONSTANT;

        throw new RuntimeException;

        new BarClass();

        $dt = new
        DateTime;
    }

    public function throwEx()
    {
        throw new InvalidArgumentException;
    }

    public function fromNamespace($foo)
    {
        $closure = function () use ($foo) {};

        return new CorrectClassNameCaseUnitTest();
    }

    public function method2(
        DateTime $a,
        CorrectClassNameCaseUnitTest $b
    ) : DateTime {
        /**
         * @param ArrayObject $ao
         * @return \ArrayIterator
         */
        $f = function(ArrayObject $ao) : \ArrayIterator {
        };
    }

    /**
     * @see https://webimpress.com/
     * @param int $a
     * @param array|\Traversable|ArrayObject $b
     * @param callable $c
     * @param AbstractTestCase|CorrectClassNameCaseUnitTest|null $testCase
     * @return AbstractTestCase
     * @throws \RangeException
     */
    public function method3(
        int $a,
        $b,
        callable $c,
        AbstractTestCase $testCase = null
    ) : AbstractTestCase {
        throw new \RangeException;
    }

    /**
     * @param iterable|\Traversable[]|ArrayObject[]|Foo[] $a
     */
    public function trav(iterable $a)
    {
    }

    /**
     * @param \Bar[]\Foo[] $param
     */
    abstract public function invalidTypeFormatIsNotChanged($param);

    public function fnClosure()
    {
        $fn = fn(DateTime $d) : DateTime => $d;
    }
}
