<?php

namespace MyNamespace\Test;

use ArrayIterator as AI;
use DateTime;
use RuntimeException as Exception;
use ZTest\MyNamespace\ParentClass as VarTagParent;

class VarTag extends VarTagParent {
    /**
     * @var
     */
    public $a;

    /**
     * @var something
     */
    public $a;

    /**
     * @var something
     */
    public $a;

    /**
     * @var
     */
    public $a;

    /**
     * @var int
     */
    public $a;

    /**
     * @var mixed
     */
    public $a;

    /**
     * @var mixed[]
     */
    public $a;

    /**
     * @var mixed|mixed[]
     */
    public $a;

    /**
     * @var string|DateTime[]|\Traversable
     */
    public $a;

    /**
     * @var VarTag
     */
    public $a;

    /**
     * @var \MyNamespace\Test\VarTag
     */
    public $a;

    /**
     * @var parent
     */
    public $a;

    /**
     * @var parent
     */
    public $a;

    /**
     * @var VarTag[]
     */
    public $a;

    /**
     * @var \MyNamespace\Test\VarTag[]
     */
    public $a;

    /**
     * @var parent[]
     */
    public $a;

    /**
     * @var parent[]
     */
    public $a;

    /**
     * @var ParentClass
     */
    public $a;

    /**
     * @var ParentClass[]
     */
    public $a;

    /**
     * @var bool|int
     */
    public $a;

    /**
     * @var void
     */
    public $a;

    /**
     * @var void[]
     */
    public $a;

    /**
     * @var true|false
     */
    public $a;

    /**
     * @var bool|true
     */
    public $a;

    /**
     * @var bool|false
     */
    public $a;

    /**
     * @var DateTime
     */
    public $a;

    /**
     * @var ?array
     */
    public $a;

    /**
     * @var |int|
     */
    public $a;

    /**
     * @var
     */
    public $a;

    /**
     * @var Exception
     */
    public $a;

    /**
     * @var string
     */
    public $a;

    /**
     * @var float|int|string
     */
    public $a;

    /**
     * @var bool|int|DateTime
     */
    public $a;

    /**
     * @var null|\ArrayAccess|\ArrayObject|DateTime
     */
    public $a;

    /**
     * @var bool
     */
    public $a;

    /**
     * @var null[]|string[]
     */
    public $a;

    /**
     * @var
     */
    public $a;

    /**
     * @var null
     */
    public $a;

    /**
     * @var null[]
     */
    public $a;

    /**
     * @var null[][]
     */
    public $a;

    /**
     * @var null|null[]
     */
    public $a;

    /**
     * @var mixed|string
     */
    public $a;

    /**
     * @var array|mixed[]
     */
    public $a;

    /**
     * @var int|void
     */
    public $a;

    /**
     * @var AI
     */
    public $a;

    /**
     * @var AI
     */
    public $a;

    /**
     * @var AI
     */
    public $a;

    /** @var self */
    public $a;

    /** @var static */
    public $a;

    /** @var parent */
    public $a;

    /** @var self */
    public $a;

    /** @var static */
    public $a;

    /** @var parent */
    public $a;

    /**
     * @var int Description.
     */
    public $a;

    /** @var */
    public $a;

    /** @var Description. */
    public $a;

    /**
     * @var array {
     *     @var bool $required
     *     @var string $label
     *     @var array $arr {
     *         @var int $counter
     *         @var float
     *         @var $precision
     *     }
     * }
     */
    public $a;

    public function test()
    {
        /** @var int */
        foreach (func_get_args() as $a) {
        }

        new class () {
            /** @var bool */
            private $a;
        };

        /** @var Exception\Hello $a Description. */
        $a = 'hello';
    }

    /**
     * @var Exception\Hello Description.
     */
    public $a;

    /**
     * @var    int Some  long  description
     */
    public $moreThanOneSpace;
}
