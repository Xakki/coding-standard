<?php
/**
 * @license wrong indents in docblocks.
 */

namespace MyApp\MyNamespace;

/**
 * Class foo
 * Description of the class
 *   - OK
 * Indents
 *
 * @package MyApp\MyNamespace
 */
class Foo
{
    /**
     * @param bool $x
     * @param int $y
     */
    protected function test1($x, $y)
    {
    }

    /**
     * @return string
     */
    protected function test2()
    {
        /** @var int $x */
        $x = 10;

        /** @var string $y */
        $y = 'foo';

        /**
         * @var float $z
         */
        $z = 10.1;
    }

    /**
     * @return float
     */
    protected function test3()
    {
        $var = 'empty docblock';

        $foo = 'empty';

/** @var int $bar */
$bar = 1;

/** @var int $baz */
$baz = 2;

/**
 * @var int $a
 */
$a = 0;

        /**
         * @var float $b
         */
        $b = 1.1;

/**
 * This is something.
 *
 * @var string $c
 */
$c = 'xyz';

        $d = 'foo';

        $e = 'bar';

        /**
         * @var string $f
         */
        $f = 'baz';

        /**
         * @var int $g
         */
        $g = 11;

        /**
         * @var int $h
         */
        $h = 12;

        /** @var int $i */
        $i = 13;

        /** @var int $j */
        $j = 14;

        /**
         * @var int $k
         */
        $k = 15;

    }

    /**
     * This is function.
     *
     * @return void
     */
    public function test4()
    {
        /**
         * This is description of the variable.
         */
        $a = 1;

        /** This is another description */
        $b = 1;
    }

    /**
     * Description
     *
     * @return void
     */
    public function test5()
    {
        /**
         * Long information about the variable.
         *
         * @var string $x
         */
        $x = 'something';
    }

    /** @var string */
    private $b = 'xyz';

    /**
     * @param int $a
     * @param string $b Description.
     * @return void
     * @throws \Exception
     * @throws \RuntimeException When...
     */
    public function test6($a, $b)
    {
        /** @var string $foo */
        $foo = 'foo';
    }

    /**
     * Here is method description.
     * It could be very long.
     * There should be one empty line before params.
     *
     * @param int $a Another description.
     * @param bool $b
     * @param string $def This is very long
     *     description of the param
     *     ... continues here
     * @return array This is
     *     description, of the returned value.
     *
     * @throws \Exception
     *
     * @throws \RuntimeException
     *
     * Here is an extra comment. It is not allowed to be here.
     */
    public function test7($a, $b, $def)
    {
        return [$a, $b, $def];
    }

    /**
     * @todo: comment
     *     next line
     *     another one
     *
     * @return void The description
     *     extra line here
     * @dataProvider myDataProvider
     * @noWhitespaceAfterTag
     */
    public function test8()
    {
    }

    /**
     * Empty line in the comment is not allowed.
     *
     * Here is something else.
     */
    public function test9()
    {
    }

    /**
     * @param array $arr {
     *     @var bool $required Here is the description
     *         of the field in the array
     *             hey
     *     @var string $name Another very long
     *         description here
     * }
     */
    public function test10(array $arr)
    {
    }

    /**
     * @param array $a {
     *     @var array {
     *         @var string $val Descr
     *             iption.
     *         @var bool $req
     *     }
     * }
     */
    private function twoLevelNesting(array $a) {}

    /**
     * This is a description.
     * {@inheritDoc}
     */
    private function inheritDoc1() {}

    /**
     * This is a description.
     * {@inheritdoc}
     */
    private function inheritDoc2() {}

    /**
     * @inheritDoc
     */
    private function inheritDocTag1() {}

    /**
     * @inheritdoc
     */
    private function inheritDocTag2() {}

    /**
     * @see
     */
    private function emptySeeContent() {}

    /**
     * @triggers Comment here
     *     and continuation here
     *     and here
     * @triggers Something
     *     else
     *     here
     * @triggers hello
     *     world
     *             foo
     *     bar baz
     */
    public function descriptionIndentWithTags() {}

    public function docCommentInArray() : array
    {
        return [
            /**
             * @param mixed $a
             * @return mixed
             */
            static function ($a) {
                return $a;
            },
        ];
    }

    public function docCommentInFunctionCall() : void
    {
        $this->getName(
            /**
             * @param mixed $a
             * @return mixed
             */
            static function ($a) {
                return $a;
            }
        );
    }

    public function docCommentInSwitch(string $a)
    {
        switch ($a) {
            case 'foo':
                /** @var string $var */
                $var = $this->getName();

                return $var[0];
            default:
                /**
                 * @param int[] $a
                 * @return int
                 */
                return static function (array $a) {
                   return PHP_INT_MAX;
                };
        }
    }

    /**
     * FIRST DOC-BLOCK COMMENT
     */

    /**
     * Method doc-block
     */
    public function allowSpaceBetweenTwoPhpDocBlock()
    {
    }

    /**
     * @return void
     */
    public function wrongAdditionalStarsWithOpenAndCloseTags()
    {
    }
}

/**
 * hey
 * hello
 */

/**
 * hi
 *  hello
 */

/**
 * @var int $param
 */
$param = 1;
