<?php

class Test
{
    /**
     * @param mixed $a
     * @param mixed $b
     * @return int
     */
    public function method($a, $b)
    {
        if ($a > $b) {
            return 1;
        }

        return [
            1,
            2,
        ];
    }
}

switch (true) {
    case '1':
        echo 1;
        break;
    case '2':
        echo 2;
        break;
    default:
        switch ($a) {
            default:
            case 0:
                echo 9;
                return 17;
            case 1:
                break;
        }
        break;
}

usort($a, function($x, $y) {
    return $x > $y;
});

function x($a) {
    /*
     * some comment
     */
    $y = $a;

    return $y;
}

class Test2 {
    public $var = <<<VAR
This is multiline
variable
content.
VAR;

    public $bar = <<<'BAR'
Another one.
BAR;

    public $foo = '
       multiline
            content
 here';
}

$var = ($a
    ? 'a'
    : 'b') . 'x';

$bar = 'x' . ($b
    ? 'a'
    : 'b');

$foo = $a
    ? $b
        ? $c
        : $d
    : $e;

$variable->call($a, $b)
         ->another($x)
         ->oneMore($d);

(new DateTime())
    ->modify('-1 day')
    ->modify('-1 hour');

$m = (new DateTime())->modify('-1 second')
                     ->modify('+1 second');

$val = $class->{$method}($value)
             ->{$value};

$v = $a->{$m}(1)
       ->{$d}
       ->date
       ->modify('-1 day')
       ->format('Y-m-d');

$f = function () use (
    $foo,
    $bar
) {
    return $foo + $bar;
};

LABEL:

$something = 'porter';

OTHER:

$other = 'label';

$g = $t->method()
       ->another(function () {
           $x = 13;

           return $x;
       });

$concatenation = 'string'
    . 'next part';

$sum = $a
    + $b;

class B {
    public function foo()
    {
        return function ($stream, $streamIndex) {
            return preg_match('#(.*?)\r?\n#', $stream, $matches, null, $streamIndex) === 1
                ? $matches[1]
                : substr($stream, $streamIndex);
        };
    }

    public function bar($parameters)
    {
        return array_filter(
            $parameters,
            function (array $parameter) {
                return PHP_VERSION_ID >= 70100
                    || (false === strpos($parameter[2], '?')
                        && ! in_array(strtolower($parameter[2]), ['void', 'iterable']));
            }
        );
    }

    public function tar($abc, $def)
    {
        /*
            this part is commented out
            and doesn't matter
        what
    indent
do we have here.

         */
        return PHP_VERSION_ID >= 70100
            && ($abc
                || $def);
    }

    private function test2($services)
    {
        return function () use ($services) {
            return $services->get('Application')
                            ->method1()
                            ->method2();
        };
    }
}

switch ($a) {
    // POST
    case 'POST':
        $do = 'something';
        break;
    // GET
    case 'GET':
        // my comment here
        break;
    // All others
    default:
        $do = 'nothing';
        break;
}

echo "This is a long
string that spans $numLines lines
      without indenting.
";

$oldArray = array(
    'the', 'sniff',
    'does',
    'check',      'indents', 'in',
    'arrays'
);

class Test3
{
    public static $a;

    public static function xyz($b)
    {
        if (static::$a[$b] === null) {
            static::$a[$b] = new static(
                'it',
                'is',
                'not checked in that sniff'
            );
        }
    }
}

$obj->{$m}(
    'skip',
    'it'
);

if ($a == 5) :
    echo "a equals 5";
    echo "...";
elseif ($a == 6) :
    echo "a equals 6";
    echo "!!!";
else :
    echo "a is neither 5 nor 6";
endif;

if ($foo):
    if ($bar) $foo = 1;
    elseif ($baz) $foo = 2;
endif;

usort(
    $a,
    function (
        $x,
        $y
    ) {
        return $x > $y;
    }
);

$var = $foo
    && $bar
    && ($baz
        || $key);

$num = $multi
    * ($val1
        + $val2)
    + $int;

$closure = function (
    $a,
    $b,
    $c
) {
    if ($a + $b > $c) {
        return $a
            && ($b
                || $c);
    }

    return $b && ($a
            || $c);
};

switch ($r) {
    case self::TYPE:
        $var = null;
        if ($x) {
            return 1;
        }
        exit;
    case self::GO;
        return function () use ($r) {
            if ($r) {
                throw new \InvalidArgumentException(
                    sprintf('Error %s', 'value')
                );
            }

            return function ($a, $b) {
                return $a <=> $b;
            };
        };
    case self::DEF:
    default:
        $var = 1;
        throw new \Exception(sprintf(
            'Type "%s" is unknown or cannot be used as property default value.',
            get_class($value)
        ));
}

(function ($a, $b) {
    return function ($c, $d) use ($a, $b) {
        echo $a, $b, $c, $d;
    };
})(
    'a',
    'b'
)(
    'c',
    'd'
);

(new \DateTime([
    'something',
]))->format('ymd');

$myVariable
    ->call(sprintf(
        'Text %s',
        'value'
    ));

class MyClass
{
    public function test()
    {
    }
}

$mock->expects(
         $this->any()
     )
     ->method('get')
     ->will($this->throwException());

$mock->expects($this->any())
     ->method(
         'get'
     )
     ->will($this->throwException());

$mock
    ->expects($this->any())
    ->method(
        'get'
    )
    ->will($this->throwException());

$mock
    ->expects(
        $this->any()
    )
    ->method('get')
    ->will($this->throwException());

class Test3
{
    public function method()
    {
        $mock->expects(
                 $this->any()
             )
             ->method('get')
             ->will($this->throwException());

        $mock->expects($this->any())
             ->method(
                 'get'
             )
             ->will($this->throwException());

        $mock
            ->expects($this->any())
            ->method(
                'get'
            )
            ->will($this->throwException());

        $mock
            ->expects(
                $this->any()
            )
            ->method('get')
            ->will($this->throwException());
    }

    public function method2()
    {
        $mock->method(
                 'param'
             )
             ->shouldBeCalled();
    }

    public function method3()
    {
        $list = [
            'fn' => function ($a) {
                if ($a === true) {
                    echo 'hi';
                }
            },
            'call' => sprintf(
                'Text %s',
                'param'
            ),
        ];
    }

    public function method4()
    {
        $this->console
             ->writeln(
                 Argument::that(function ($arg) {
                     if (false === strpos($arg, 'src/ErrorMiddleware.php')) {
                         return false;
                     }
                     if (false === strpos(
                         $arg,
                         sprintf('<error>implementing %s</error>', ErrorMiddlewareInterface::class)
                     )) {
                         return false;
                     }
                     return true;
                 })
             )
             ->shouldBeCalled();
    }
}

$foo = $bar
    + [
        'foo',
        'bar',
    ];

$foo = $bar
    + func(
        'foo',
        'bar'
    );

$f->foo(
      'foo'
  )
  ->bar(
      'bar',
      $foo
      + [
          'bar',
      ]
  );

$this->abc($a, [
         'param1',
         'param2',
     ])
     ->def();

$this->def($a, [
    'abc',
    'def',
]);

throw new MyException(sprintf(
    'Type "%s" is unknown or cannot be used as property default value.',
    get_class($value)
), $param, [
    'foo' => 'bar',
    'bar' => 'baz',
]);

function test1(array $a, $b)
{
    if (array_filter($a, function ($v) use ($b) {
        return $v === $b * 2;
    })) {
        return 1;
    }

    return 0;
}

function test2()
{
    if (false === strpos(
        'haystack',
        'needle'
    )) {
        return 1;
    }

    return 0;
}

$response = $handler->handle(
    $request
        ->withMethod(RequestMethod::METHOD_GET)
        ->withAttribute(self::FORWARDED_HTTP_METHOD_ATTRIBUTE, RequestMethod::METHOD_HEAD)
);

yield 'key' => (new DateTime(
        (function () {
            yield 'key1' => (new X(
                'hi'
            ));

            yield 'key2' => (new X(
                    'hi'
                ))
                ->m()
                ->r();

            yield 'key3' => function () {
                return [
                    'arr' => (new X(
                            'hello'
                        ))
                        ->m()
                        ->s(),
                ];
            };
        })()
    ))
    ->format('Y');

$abc = [
    $test
        ->abc()
        ->def(),
];

$def = function ($a) {
    $a
        ->a()
        ->b();
};

$ghi = [
    [
        function () {
        },
        $hey
            ->a()
            ->b(),
    ],
    $hola
        ->c()
        ->d(),
];

$x = function () {
    // comment
    # comment
    /* comment */
    return 1;
};

if ($a
    && $b
) {
}

$instance = new class(
    $param1,
    $param2
) extends Foo implements
  \ArrayAccess,
   \Countable,
 \Traversable
{
};

interface MyInterface extends
 OtherInterface,
   \Traversable {
}

new class extends \DateTime {
    public function reset()
    {
        echo 1;
    }
};

$array = [
    (new \DateTime())
        ->modify('+1 day')
        ->format('Y-m-d'),
    'string',
];

$object
    ->method(
        (new MyClass())
            ->inner((string) $value)
    )
    ->outer();

switch (true) {
    case $object->something():
        $method->test();
        break;
    case $obj->test():
        return $qb->select();
}

$obj->hello()
&& $object
    ->world();

$foo && $bar
&& ($baz
    || $ban);

$sum = ($a
        + $b) * 2;

$var = $obj->foo()
           ->bar()
           ->baz()
    && $sum === 10;

$alignOperator->foo()->bar()
                     ->baz()
                     ->var();

$var = $alignOperator->foo()->bar()
                            ->baz()
                            ->var();

$variable = $object->hello()
    && $other
        ->foo()
        ->bar();

$variable = ($object->hello()
        && $other
            ->foo()
            ->bar())
    || $b === 1;

$variable = $object->hello()
    && ($other
            ->foo()
            ->bar()
        || $other
            ->baz()
            ->var());

if ($object->hello()
    && $other
        ->foo()
        ->bar()
    && $other
        ->baz()
        ->var()
) {
    return true;
}

if ($object->hello()
    && ($other
            ->foo()
            ->bar()
        || $other
            ->baz()
            ->var())
) {
    return true;
}

if ($a
    !== $b
    && $c
    instanceof \DateTime
) {
    return $a && ($b
            || $c);
}

$a =
    $a ? $f
        : $b;

$a === $b
    ? $this->test(
        $a
    )
    : $this->test(
        $b
    );

if ($a
    && $this->b(
        $c
    )
) {
}

$a = [
    $b
        ? fn (
            int $c
        ) => $c
        : fn (
            int $d
        ) => $d,
];

$fn1 = fn (int $a) : int => $a;

$fn2 = fn (int $b) : int => $b;
